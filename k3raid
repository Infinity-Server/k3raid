#!/bin/bash

ROOT_BASE="/k3raid"
RUNC_PATH="/run/k3raid"
BASE_PATH="/boot/k3raid"
ROOT_PATH="$ROOT_BASE/rootfs"
DATA_PATH="/mnt/disk1/system/k3raid"

K3S_FILE_HOME="/root"
K3S_FILE_NAME=(k3s kof k3init k3kill)
K3S_DATA_PATH=(/etc/rancher /var/lib/rancher/k3s /var/lib/kubelet /var/lib/cni /var/log)

UNRAID_RC="/etc/rc.d"
UNRAID_PATH="/usr/local/emhttp/plugins/k3raid/event"

prepare_rootfs_mount() {
  # mount old rootfs
  mkdir -p /tmp/rootfs
  mount -o bind / /tmp/rootfs
  # mount new rootfs bundle
  mkdir -p $ROOT_BASE
  mount -t tmpfs tmpfs $ROOT_BASE
  # make new rootfs bundle
  mkdir -p $ROOT_PATH
  cp -R /tmp/rootfs/* $ROOT_PATH/
  # cleanup
  umount /tmp/rootfs
  rm -rf /tmp/rootfs
}

prepare_unraid_event() {
  mkdir -p $UNRAID_PATH
  echo "#!/bin/bash" > $UNRAID_PATH/any_event
  echo "[ \"\$1\" != \"disks_mounted\" ] && [ \"\$1\" != \"unmounting_disks\" ] && [ \"\$1\" != \"start_k3s\" ] && exit" >> $UNRAID_PATH/any_event
  echo "exec bash $BASE_PATH/k3raid \$@" >> $UNRAID_PATH/any_event
  chmod 755 $UNRAID_PATH/any_event
}

prepare_unraid_service() {
  echo "#!/bin/bash" > $UNRAID_RC/rc.k3s
  echo "exec bash $BASE_PATH/k3raid rc_\$@" >> $UNRAID_RC/rc.k3s
  chmod 755 /etc/rc.d/rc.k3s
}

start_k3s() {
  # k3s data paths
  mkdir -p $DATA_PATH
  for kdp in "${K3S_DATA_PATH[@]}";
  do
    mkdir -p ${DATA_PATH}${kdp}
    mkdir -p ${ROOT_PATH}${kdp}
  done
  # generate config
  cat $BASE_PATH/k3conf |\
    sed "s|\$DATA_PATH|$DATA_PATH|g" |\
    sed "s|\$K3S_FILE_HOME|$K3S_FILE_HOME|g" |\
    cat - > $ROOT_BASE/config.json
  # copy binarys
  mkdir -p ${ROOT_PATH}${K3S_FILE_HOME}
  for file in "${K3S_FILE_NAME[@]}";
  do
    cp -rf $BASE_PATH/$file ${ROOT_PATH}${K3S_FILE_HOME}/${file}
    chmod 755 ${ROOT_PATH}${K3S_FILE_HOME}/${file}
  done
  # run
  exec runc --root $RUNC_PATH run --no-pivot --bundle $ROOT_BASE k3raid
}

unmounting_disks() {
  # kill k3s so that we can have an opportunity to cleanup
  pkill -9 k3s
  # wait container exit
  inotifywait --timeout 10 --event delete $RUNC_PATH/k3raid/state.json >/dev/null 2>&1
}

disks_mounted() {
  perl $BASE_PATH/k3back
}

k3s_alive() {
  runc --root $RUNC_PATH ps k3raid 2>/dev/null | wc -l
}

rc_status() {
  [ "$(k3s_alive)" != "0" ] && echo "* running ..." || echo "* stopped ..."
}

rc_start() {
  echo "* starting ..."
  [ "$(k3s_alive)" != "0" ] || disks_mounted
}

rc_stop() {
  echo "* stopping ..."
  [ "$(k3s_alive)" != "0" ] && unmounting_disks
}

rc_restart() {
  rc_stop
  rc_start
}

rc_() {
  echo "Usage: rc.k3s status|start|stop|restart"
}

k3s_inside_jail() {
  shift
  runc --root $RUNC_PATH exec --tty k3raid $K3S_FILE_HOME/k3s "$@"
}

init() {
  prepare_rootfs_mount
  prepare_unraid_event
  prepare_unraid_service
}

command -v $1 >/dev/null 2>&1
ok=$?
[ "$ok" -ne 0 ] || $1 "$@"
